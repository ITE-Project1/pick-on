<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ite.pickon.domain.order.mapper.OrderMapper">

    <!-- 주문 생성 -->
    <insert id="insertOrder">
        INSERT INTO ORDERS (ORDER_ID, USER_ID, STORE_ID, PRODUCT_ID, PICKUP_DATE, QUANTITY, TOTAL_PRICE, STATUS)
        VALUES (
                #{orderReq.orderId},
                #{userId},
                #{orderReq.storeId},
                #{orderReq.productId},
                #{pickupDate},
                #{orderReq.quantity},
                (SELECT PRICE FROM PRODUCT WHERE PRODUCT_ID = #{orderReq.productId}) * #{orderReq.quantity},
                #{orderReq.status})
    </insert>

    <!-- 운송 요청 생성 -->
    <insert id="insertTransportRequest">
        INSERT INTO TRANSPORT_REQUEST (TRANSPORT_REQUEST_ID, FROM_STORE_ID, TO_STORE_ID, ORDER_ID)
        VALUES (
                   transport_request_seq.NEXTVAL,
                   #{fromStoreId},
                   #{orderReq.storeId},
                   #{orderReq.orderId})
    </insert>

    <!-- 주문 목록 조회 -->
    <select id="selectOrderListByStore" parameterType="map" resultType="com.ite.pickon.domain.order.dto.MultiOrderRes">
        SELECT
            O.ORDER_ID as orderId,
            O.QUANTITY as quantity,
            NVL((SELECT S.NAME
                FROM TRANSPORT_REQUEST TR
                JOIN STORE S ON TR.FROM_STORE_ID = S.STORE_ID
                WHERE TR.ORDER_ID = O.ORDER_ID), '발송X') as fromStore,
            CASE
                WHEN O.STATUS = 2 THEN '대기'
                WHEN O.STATUS = 0 THEN '배송중'
                WHEN O.STATUS = 1 THEN '픽업가능'
                WHEN O.STATUS = 3 THEN '픽업완료'
            END as pickupStatus
        FROM ORDERS O
            JOIN STORE S ON O.STORE_ID = S.STORE_ID
            JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
        WHERE O.STORE_ID = #{storeId}
        <if test="keyword != null and keyword != ''">
            AND (LOWER(O.ORDER_ID) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
        ORDER BY O.STATUS DESC, O.ORDER_ID ASC
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>

    <!-- 주문 상세 조회 -->
    <select id="selectOrderById" parameterType="string" resultType="com.ite.pickon.domain.order.dto.OrderRes">
        SELECT
            O.ORDER_ID as orderId,
            CAST(O.CREATED_AT AS TIMESTAMP) as orderDate,
            CAST(O.PICKUP_DATE AS TIMESTAMP) as pickupDate,
            NVL((SELECT S.NAME
                 FROM TRANSPORT_REQUEST TR
                          JOIN STORE S ON TR.FROM_STORE_ID = S.STORE_ID
                 WHERE TR.ORDER_ID = O.ORDER_ID), '발송X') as fromStore,
            CASE
                WHEN O.STATUS = 2 THEN '대기'
                WHEN O.STATUS = 0 THEN '배송중'
                WHEN O.STATUS = 1 THEN '픽업가능'
                WHEN O.STATUS = 3 THEN '픽업완료'
                END as pickupStatus,
            P.IMAGE_URL as prodcutImg,
            P.NAME as productName,
            O.PRODUCT_ID as productId,
            O.QUANTITY as quantity,
            O.TOTAL_PRICE as totalPrice
        FROM
            ORDERS O
                JOIN STORE S ON O.STORE_ID = S.STORE_ID
                JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
        WHERE
            O.ORDER_ID = #{orderId}
    </select>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus">
        UPDATE ORDERS
        SET STATUS = #{statusCode}
        WHERE ORDER_ID = #{orderId}
    </update>

    <!-- 주문 상태 일괄 변경 -->
    <update id="batchUpdateOrderStatus">
        UPDATE ORDERS
        SET STATUS = #{statusCode}
        WHERE ORDER_ID IN
        <foreach item="orderId" collection="orderIds" open="(" separator="," close=")">
            #{orderId}
        </foreach>
    </update>

</mapper>