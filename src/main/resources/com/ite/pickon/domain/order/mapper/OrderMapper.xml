<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ite.pickon.domain.order.mapper.OrderMapper">

    <!-- 주문 생성 및 지점 간 운송 요청 생성 -->
    <insert id="insertOrderAndRequest">
        CALL insert_order_and_request(
            #{orderId},
            #{userId},
            #{storeId},
            #{productId},
            #{pickupDate},
            #{quantity},
            #{status},
            #{fromStoreId, jdbcType=INTEGER}
            )
    </insert>

    <!-- 지점별 주문 목록 조회 -->
    <select id="selectOrderListByStore" parameterType="map" resultType="com.ite.pickon.domain.order.dto.OrderInfoVO">
        SELECT
        orderId,
        quantity,
        fromStore,
        pickupStatus
        FROM v_order_list_by_store
        WHERE storeId = #{storeId}
        <if test="keyword != null and keyword != ''">
            AND (LOWER(orderId) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
        ORDER BY orderStatus ASC, orderId ASC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <!-- 전체 주문 목록 페이지 갯수 조회 -->
    <select id="countTotalOrderPages" parameterType="hashmap" resultType="int">
        SELECT CEIL(count(*) / #{pageSize}) AS totalPages
        FROM ORDERS O
        JOIN STORE S ON O.STORE_ID = S.STORE_ID
        WHERE S.STORE_ID = #{storeId}
        <if test="keyword != null and keyword != ''">
            AND (LOWER(O.ORDER_ID) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
    </select>

    <!-- 나의 주문 목록 조회 -->
    <select id="selectMyOrderList" parameterType="map" resultType="com.ite.pickon.domain.order.dto.OrderInfoVO">
        SELECT
            O.ORDER_ID AS orderId,
            O.CREATED_AT AS orderDate,
            O.PICKUP_DATE AS pickupDate,
            S.NAME AS storeName,
            O.STATUS AS pickupStatus,
            P.IMAGE_URL AS productImg,
            P.NAME AS productName,
            O.TOTAL_PRICE AS totalPrice,
            B.NAME AS brandName
        FROM ORDERS O
                 JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
                 JOIN STORE S ON O.STORE_ID = S.STORE_ID
                 JOIN BRAND B ON P.BRAND_ID = B.BRAND_ID
        WHERE O.USER_ID = #{userId}
        ORDER BY O.CREATED_AT DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <!-- 나의 주문 목록 페이지 갯수 조회 -->
    <select id="countTotalOrderBasePages" parameterType="hashmap" resultType="int">
        SELECT CEIL(count(*) / #{pageSize}) AS totalPages
        FROM ORDERS
        WHERE USER_ID = #{userId}
    </select>

    <!-- 주문 상세 조회 -->
    <select id="selectOrderById" parameterType="string" resultType="com.ite.pickon.domain.order.dto.OrderInfoVO">
        SELECT
            O.ORDER_ID as orderId,
            O.CREATED_AT as orderDate,
            O.PICKUP_DATE as pickupDate,
            NVL((SELECT S.NAME
                 FROM TRANSPORT_REQUEST TR
                          JOIN STORE S ON TR.FROM_STORE_ID = S.STORE_ID
                 WHERE TR.ORDER_ID = O.ORDER_ID), '-') as fromStore,
            S.NAME as toStore,
            CASE
                WHEN O.STATUS = 2 THEN '대기'
                WHEN O.STATUS = 0 THEN '배송중'
                WHEN O.STATUS = 1 THEN '픽업가능'
                WHEN O.STATUS = 3 THEN '픽업완료'
                END as pickupStatus,
            P.IMAGE_URL as productImg,
            P.NAME as productName,
            O.PRODUCT_ID as productId,
            O.QUANTITY as quantity,
            O.TOTAL_PRICE as totalPrice,
            U.PHONE_NUMBER as userPhoneNumber
        FROM
            ORDERS O
                JOIN STORE S ON O.STORE_ID = S.STORE_ID
                JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
                JOIN USERS U ON O.USER_ID = U.USER_ID
        WHERE
            O.ORDER_ID = #{orderId}
    </select>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus">
        UPDATE ORDERS
        SET STATUS = #{statusCode}
        WHERE ORDER_ID = #{orderId}
    </update>

    <!-- 주문 상태 일괄 변경 -->
    <update id="batchUpdateOrderStatus">
        UPDATE ORDERS
        SET STATUS = #{statusCode}
        WHERE ORDER_ID IN
        <foreach item="orderId" collection="orderIds" open="(" separator="," close=")">
            #{orderId}
        </foreach>
    </update>

    <!-- 배송 완료된 주문 목록 조회 -->
    <select id="selectOrderListById" parameterType="list" resultType="com.ite.pickon.domain.order.dto.OrderInfoVO">
        SELECT
            O.ORDER_ID as orderId,
            S.NAME as toStore,
            P.NAME as productName,
            U.PHONE_NUMBER as userPhoneNumber
        FROM
            ORDERS O
            JOIN STORE S ON O.STORE_ID = S.STORE_ID
            JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
            JOIN USERS U ON O.USER_ID = U.USER_ID
        WHERE
            O.ORDER_ID IN
            <foreach item="orderId" collection="orderIds" open="(" separator="," close=")">
                #{orderId}
            </foreach>
    </select>

</mapper>